Step 1: Create the Interceptor Function
javascript
Copy code
// fetchInterceptor.js

export const fetchInterceptor = (() => {
  const originalFetch = window.fetch;

  return async (url, options = {}) => {
    // Request Interceptor Logic
    console.log(`Fetching: ${url}`);

    // Example: Add Authorization Header
    const modifiedOptions = {
      ...options,
      headers: {
        ...options.headers,
        Authorization: 'Bearer your_token_here', // Add your token logic here
      },
    };

    try {
      const response = await originalFetch(url, modifiedOptions);

      // Response Interceptor Logic
      if (!response.ok) {
        // Example: Handle Errors Globally
        if (response.status === 401) {
          // Handle Unauthorized Error (e.g., Redirect to login)
          console.error('Unauthorized! Redirecting to login...');
        } else {
          console.error(`Error: ${response.status} ${response.statusText}`);
        }
      }

      return response;
    } catch (error) {
      // Handle Network Errors
      console.error('Network Error:', error);
      throw error;
    }
  };
})();
Step 2: Replace the Native Fetch with the Interceptor
In your main JavaScript file, replace the native fetch function with the fetchInterceptor.

javascript
Copy code
// index.js or main.js

import { fetchInterceptor } from './fetchInterceptor';

window.fetch = fetchInterceptor;
Step 3: Use Fetch Normally in Your React Components
Since the interceptor is now wrapping the native fetch, you can use fetch as usual in your React components.

javascript
Copy code
// MyComponent.js
import React, { useEffect, useState } from 'react';

const MyComponent = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://api.example.com/data');
        if (response.ok) {
          const jsonData = await response.json();
          setData(jsonData);
        }
      } catch (error) {
        console.error('Fetch failed:', error);
      }
    };

    fetchData();
  }, []);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Data from API:</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
};

export default MyComponent;
